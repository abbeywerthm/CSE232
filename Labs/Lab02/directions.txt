There are many properties of numbers that one can investigate. The ancient Greeks were fascinated by the properties of integers, even ascribing them mystical properties.
One such property is an integer’s additive persistence, and its resulting additive root (more information). Additive persistence is a property of the sum of the digits of an integer. The sum of the digits is found, and then the summation of digits is performed, creating a new sum. This process repeats until a single integer digit is reached. Consider the following example:
The beginning integer is 1234
The sum of its digits is 1+2+3+4 = 10
The integer is now 10
The sum of its digits is 1+0 = 1
The integer is now 1. When the value reaches a single digit, we are finished. This final integer is the additive root.
The number of cycles is the additive persistence. The integer, 1234, has an additive persistence of 2 (first sum was 10, then the second sum was 1). The final digit reached is called the integer’s additive root. Thus, the integer, 1234, has an additive root of 1.

Program Specifications

Accept a series of integers from standard input (cin). The program ends under one of the following circumstances (meaning that we repeat this entire process – use a loop):
If the next gathered integer is a negative number
If all the integers from the file have been processed (some noninteger or EOF encountered, i.e., cin returns false)
If the given integer is a single digit, report its additive persistence as 0, and its additive root as itself on a single line as two space-separated numbers
For each multi-digit, non-negative integer, output on a single line the two space-separated numbers:
1. The integer’s additive persistence
2. The integer’s additive root

Example input:
1234
782498
52432
975800

Expected output:
2 1
3 2
2 7
3 2


Please note that if the there is no more input (like after the 975800) or a negative number, the program should immediately end.
If you are getting timeout errors, please be sure that your program works at least with one value before implementing loops to handle more difficult circumstances.
Also be aware that you should check for when an input steam is in an error state (like what was done in the lecture on switch statements), to determine if the insertion operation was successful.

How do you get started on a program like this?
Break the problem down into parts. Here are some obvious ones:
Gather input from the file, and check for negative numbers (the quit condition)
Check if the input is between 0 and 9 (that’s a special case, as indicated above)
Otherwise, write a loop that calculates the persistence (track the count through this loop)
Inside that loop, write another loop that can sum the digits of an integer until it reaches a single digit
How do you get the digits of an integer? Look at using a combination of the division (/) and modulus (%) operators.
As you try to get this program working, add some “diagnostic output” so you can be sure that it is running like you expect it to. For each pass through the loop of the additive persistence, print each new integer created. You can always fix it to give the exact, required output later.
